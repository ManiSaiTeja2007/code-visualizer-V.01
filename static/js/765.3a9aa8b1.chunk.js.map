{"version":3,"file":"static/js/765.3a9aa8b1.chunk.js","mappings":"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","sources":["components/Visualizer.tsx"],"sourcesContent":["import React, { useState, useEffect, memo, lazy, Suspense } from \"react\";\r\nimport { AnalysisState, Step } from \"../types\";\r\n\r\nconst ArrayVisualizer = lazy(() => import(\"../visualizations/ArrayVisualizer\"));\r\nconst LinkedListVisualizer = lazy(\r\n  () => import(\"../visualizations/LinkedListVisualizer\")\r\n);\r\nconst StackQueueVisualizer = lazy(\r\n  () => import(\"../visualizations/StackQueueVisualizer\")\r\n);\r\nconst TreeVisualizer = lazy(() => import(\"../visualizations/TreeVisualizer\"));\r\n\r\ninterface VisualizerProps {\r\n  nodes: AnalysisState[\"nodes\"];\r\n  edges: AnalysisState[\"edges\"];\r\n  structures: string[];\r\n  steps: Step[];\r\n}\r\n\r\nconst Visualizer: React.FC<VisualizerProps> = memo(\r\n  ({ nodes, edges, structures, steps }) => {\r\n    const [currentStep, setCurrentStep] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [speed, setSpeed] = useState(1000);\r\n\r\n    useEffect(() => {\r\n      let interval: NodeJS.Timeout;\r\n      if (isPlaying && currentStep < steps.length - 1) {\r\n        interval = setInterval(() => {\r\n          setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));\r\n        }, speed);\r\n      }\r\n      return () => clearInterval(interval);\r\n    }, [isPlaying, currentStep, steps.length, speed]);\r\n\r\n    const getVisualizer = () => {\r\n      const step = steps[currentStep] || {\r\n        variables: [],\r\n        activeNode: \"\",\r\n        activeEdge: \"\",\r\n        output: \"\",\r\n      };\r\n      const enhancedNodes = nodes.map((node) => ({\r\n        ...node,\r\n        style: node.id === step.activeNode ? { border: \"2px solid red\" } : {},\r\n        data: {\r\n          ...node.data,\r\n          label: `${node.data.label} (${\r\n            step.variables.find((v) => node.id.includes(v.name))?.value ||\r\n            node.data.label\r\n          })`,\r\n        },\r\n      }));\r\n      const enhancedEdges = edges.map((edge) => ({\r\n        ...edge,\r\n        style:\r\n          edge.id === step.activeEdge ? { stroke: \"red\", strokeWidth: 2 } : {},\r\n      }));\r\n\r\n      if (\r\n        structures.includes(\"Array\") ||\r\n        structures.includes(\"Array/List\") ||\r\n        structures.includes(\"List\")\r\n      ) {\r\n        return <ArrayVisualizer nodes={enhancedNodes} edges={enhancedEdges} />;\r\n      }\r\n      if (structures.some((s) => s.includes(\"Linked List\"))) {\r\n        return (\r\n          <LinkedListVisualizer nodes={enhancedNodes} edges={enhancedEdges} />\r\n        );\r\n      }\r\n      if (\r\n        structures.includes(\"Stack\") ||\r\n        structures.includes(\"Queue\") ||\r\n        structures.includes(\"Circular Queue\")\r\n      ) {\r\n        return (\r\n          <StackQueueVisualizer nodes={enhancedNodes} edges={enhancedEdges} />\r\n        );\r\n      }\r\n      if (\r\n        structures.includes(\"Tree/Graph\") ||\r\n        structures.includes(\"Binary Tree\") ||\r\n        structures.includes(\"Heap\") ||\r\n        structures.some((s) => s.includes(\"Recursive Call\"))\r\n      ) {\r\n        return <TreeVisualizer nodes={enhancedNodes} edges={enhancedEdges} />;\r\n      }\r\n      return null;\r\n    };\r\n\r\n    return (\r\n      <Suspense fallback={<div>Loading Visualization...</div>}>\r\n        <div className=\"mt-4\">\r\n          <h2 className=\"text-xl font-semibold\">\r\n            Data Structure Visualization\r\n          </h2>\r\n          <div className=\"flex items-center space-x-4 mb-4\">\r\n            <button\r\n              className=\"bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600\"\r\n              onClick={() => setCurrentStep((prev) => Math.max(prev - 0, 1))}\r\n              disabled={currentStep === 0}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              className=\"bg-blue-500 text-white px-2 py-1 rounded bg-blue-600 hover:\"\r\n              onClick={() => setIsPlaying(!isPlaying)}\r\n            >\r\n              {isPlaying ? \"Pause\" : \"Play\"}\r\n            </button>\r\n            <button\r\n              className=\"bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600\"\r\n              onClick={() =>\r\n                setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1))\r\n              }\r\n              disabled={currentStep === steps.length - 1}\r\n            >\r\n              Next\r\n            </button>\r\n            <select\r\n              className=\"p-1 border rounded\"\r\n              value={speed}\r\n              onChange={(e) => setSpeed(Number(e.target.value))}\r\n            >\r\n              <option value=\"500\">Fast</option>\r\n              <option value=\"1000\">Normal</option>\r\n              <option value=\"2000\">Slow</option>\r\n            </select>\r\n            <span>\r\n              Step {currentStep + 1} of {steps.length}\r\n            </span>\r\n          </div>\r\n          {getVisualizer()}\r\n          {steps[currentStep]?.variables.length > 0 && (\r\n            <div className=\"mt-2\">\r\n              <h3 className=\"text-lg\">Variables:</h3>\r\n              <ul className=\"list-disc pl-5\">\r\n                {steps[currentStep].variables.map((v, idx) => (\r\n                  <li key={idx}>\r\n                    {v.name}: {v.value}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n          {steps[currentStep]?.output && (\r\n            <div className=\"mt-2\">\r\n              <h3 className=\"text-lg\">Output:</h3>\r\n              <p className=\"p-2 bg-gray-100 rounded\">\r\n                {steps[currentStep].output}\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Suspense>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Visualizer;\r\n"],"names":["ArrayVisualizer","lazy","LinkedListVisualizer","StackQueueVisualizer","TreeVisualizer","memo","_ref","_steps$currentStep","_steps$currentStep2","nodes","edges","structures","steps","currentStep","setCurrentStep","useState","isPlaying","setIsPlaying","speed","setSpeed","useEffect","interval","length","setInterval","prev","Math","min","clearInterval","_jsx","Suspense","fallback","children","_jsxs","className","onClick","max","disabled","value","onChange","e","Number","target","getVisualizer","step","variables","activeNode","activeEdge","output","enhancedNodes","map","node","_step$variables$find","_objectSpread","style","id","border","data","label","concat","find","v","includes","name","enhancedEdges","edge","stroke","strokeWidth","some","s","idx"],"sourceRoot":""}